// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Models.PresidentialCandidateSearchTerm", b =>
                {
                    b.Property<int>("PresidentialCandidateSearchTermId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PresidentialCandidateSearchTermId"), 1L, 1);

                    b.Property<string>("CandidateBase64Pic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CandidateSearchTerm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("NumberOfNegativeTweets")
                        .HasColumnType("bigint");

                    b.Property<long>("NumberOfNeutralTweets")
                        .HasColumnType("bigint");

                    b.Property<long>("NumberOfPositiveTweets")
                        .HasColumnType("bigint");

                    b.Property<string>("OverAllPublicSentimentOfCandidate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OverAllSentimentProbability")
                        .HasColumnType("float");

                    b.Property<long>("TotalNumberOfTweetsAssesed")
                        .HasColumnType("bigint");

                    b.HasKey("PresidentialCandidateSearchTermId");

                    b.ToTable("PresidentialCandidatesSearchTerms");
                });

            modelBuilder.Entity("Entities.Models.Tweet", b =>
                {
                    b.Property<Guid>("TweetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BestClassName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("BestClassProbability")
                        .HasColumnType("real");

                    b.Property<int>("PresidentialCandidateSearchTermId")
                        .HasColumnType("int");

                    b.Property<float>("ProbabilityOfBeingPositive")
                        .HasColumnType("real");

                    b.Property<bool>("SentimentHasBeenPerformed")
                        .HasColumnType("bit");

                    b.Property<string>("TweetText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TweetId");

                    b.HasIndex("PresidentialCandidateSearchTermId");

                    b.ToTable("Opinions");
                });

            modelBuilder.Entity("Entities.Models.Tweet", b =>
                {
                    b.HasOne("Entities.Models.PresidentialCandidateSearchTerm", null)
                        .WithMany("Opinions")
                        .HasForeignKey("PresidentialCandidateSearchTermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.PresidentialCandidateSearchTerm", b =>
                {
                    b.Navigation("Opinions");
                });
#pragma warning restore 612, 618
        }
    }
}
